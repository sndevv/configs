*engspchk.txt*	English Spelling Checker   (v41)	Dec 19, 2003

Author:  Charles E. Campbell, Jr.  <NdrOchip@ScampbellPfamilyA.bizM>
	(elide NOSPAM from my email before using)

==============================================================================
1. Contents					*engspchk* *engspchk-contents*

	1. Contents...................................: |engspchk-contents|
	2. English Spelling Checker Manual............: |engspchk|
	   Variables Controlling Usage................: |engspchk-var|
	   Included Maps..............................: |engspchk-map|
	   Click-N-Fix Maps...........................: |engspchk-clicknfix|
	   Maps For Alternatives Window Only..........: |engspchk-alt|
	   Usage......................................: |engspchk-usage|
	   Filetype Enabled Engspchk..................: |engspchk-mail|
	   Checking Spelling In Comments..............: |engspchk-comment|
	3. More Languages.............................: |engspchk-language|
	   Creating A New Version of Engspchk.........: |engspchk-newversion|
	   Earlier Language Support...................: |engspchk-earlylang|
	4. History....................................: |engspchk-history|


==============================================================================
2. English Spelling Checker Manual			*engspchk-manual*

VARIABLES CONTROLLING USAGE		*engspchk-var* *engspchk-variable*
					*engspchk-variables*

	g:spchkacronym: If this variable exists, then two or more capital
	    letters will not highlight as a spelling error; instead such a
	    word will be assumed to be an acronym.

	g:cvimsyn : If this vim variable is set, then it is expected to old
	    the path to the user word dictionary and database, nominally
	    <engspchk.dict> and <engspchk.usr>.  If it doesn't exist, then
	    engspchk will consider using a system environment variable called
	    CVIMSYN (see below); and then search along the runtimepath.

	    For example, under a Windows operating system, one might
	    have in one's <.vimrc> file:

		let g:cvimsyn= 'c:\vim\vimfiles\CVIMSYN'
	    or
		let g:cvimsyn= 'c:\vim\vimfiles\plugin\CVIMSYN'

	    Under Unix/Linux, one might have

		let g:cvimsyn= expand('${HOME}/.vim/CVIMSYN')
	    or
		let g:cvimsyn= expand('${HOME}/.vim/plugin/CVIMSYN')

	CVIMSYN   : points to a directory holding the dictionary and the user
	    word database <engspchk.usr>.  The optional file <engspchk.wb>,
	    which contains words from Webster's 1913 Dictionary that aren't in
	    <engspchk.dict> itself, if present in the CVIMSYN directory, will
	    also be loaded.

	    If the dictionary files cannot be found using g:cvimsyn or
	    $CVIMSYN, then <engspchk> will search all the paths specified by
	    the runtimepath (to see your runtimepath, :echo &rtp) for a
	    subdirectory called CVIMSYN which holds the dictionaries.

	g:DrChipTopLvlMenu: by default its "DrChip"; you may set this to
	    whatever you like in your <.vimrc>.  This variable controls
	    where engspchk's menu items are placed.

	g:spchkautonext =0: no new behavior
	                =1: \es and \et (and \ea, if a word is selected) will
			    automatically advance the cursor to the next
			    spelling error.  (needed for Click-N-Fix)

	g:spchkdialect  = "usa"  United States
	                = "uk"   United Kingdom
			= "can"  Canadian
		    : This variable allows the user to specify the dialect
		      he or she prefers.  Colour vs. color, etc.  Alternate
		      dialect spellings are flagged with Warning colors.

	g:spchklang : specifies which language/dictionaries are to be used.
	    By default it will be the prefix of the <---spchk.vim> file
	    (engspchk.vim -> eng, gerspchk.vim -> ger, frspchk.vim -> fr,
	    etc).  You may override that with a different prefix in your
	    <.vimrc>.  When you load <engspchk.vim> (via \ec) the prefix will
	    be used to load the dictionaries: <engspchk.dict>, <engspchk.usr>,
	    <gerspchk.dict>, <gerspchk.usr>, etc.

	    For example, one may put into one's <.vimrc> file:

	    	let g:spchklang= "eng"

	g:spchkmouse    =0 : default
	                =1 : include mouse maps.  These mouse maps are optional
		             because mouse maps are popular and obviously can
		             interfere with other plugins' use of them.

	g:spchkpunc     =0 : no new behavior
                        =1 : check for some simple English punctuation problems
                             non-capitalized word after ellipse (... a)
                             non-capitalized word after sentence ending
			     character ([.?!])
	g:spchksilent   =0 : informative messages are allowed
	                =1 : Sourcing... and Loading... messages are suppressed

	BadWord            : a highlighting group rather than a variable,
	                     words flagged as "BadWord" show up using the
			     Error highlighting group.
			     Default: black foreground on red background.
                          
	Dialect            : a highlighting group rather than a variable,
	                     words flagged as "Dialect" show up using this group.
			     Default: black foreground on yellow background.
                          
	RareWord           : a highlighting group rather than a variable,
	                     words flagged as "RareWord" show up using this group.
			     Default: black foreground on cyan background.

INCLUDED MAPS					*engspchk-maps* *engspchk-map*

	Although the maps as discussed here show a backslash, the actual
	maps for 6.0 and above use <Leader> (ie. see :help mapleader for more)
	which allows you to customize the map leader character sequence.  By
	default, of course, the <Leader> is a backslash.

	    \ea : look for alternative spellings of word under cursor
	    \ec : engspchk's startup map (loads engspchk and dictionaries)
	    \ee : end engspchk
	    \en : move cursor to the next     spelling error
	    \ep : move cursor to the previous spelling error

	    \es : save   word under cursor into user dictionary (permanently)
	    \et : add    word under cursor into user dictionary (temporarily)
	    \eS : remove word under cursor from user dictionary (permanently)
	    \eT : remove word under cursor from user dictionary (temporarily)

	Click-N-Fix Maps				*engspchk-clicknfix*

	    To enable Click-N-Fix, your mouse must be enabled (ex. :set
	    mouse=n).  Unfortunately not all console terminals' mouse handling
	    will let Vim see the mouse events.  See  :he mouse  for more on
	    this topic.

	    <leftmouse>  : there are actually two maps associated with the
	          leftmouse: when no alternate-words window is present,
		  the leftmouse moves the cursor to the next spelling
		  error.  When there is an alternate words window, and
		  the mouse is pointing in that window, then the word
		  pointed to is selected and overwrites the misspelled
		  word.

	    <rightmouse> : when an alternate-words window is present, and
	          the cursor is in that window, then like <leftmouse> that
		  word is selected and overwrites the misspelled word.
		  However, a global substitute is also done, changing
		  all instances of the misspelled word to the selected
		  alternate word (like \eA).

	The \es map will store <engspchk.usr> in the directory where
	<engspchk.dict> is.  To do so it must be able to find the directory;
	ie. typically g:cvimsyn must be set to the correct path or the
	environment variable CVIMSYN must be appropriately set.  For vim 6.0
	or later, the CVIMSYN directory under the first directory in the
	|runtimepath| may be used.

	The \et map adds the word under the cursor into the spelling
	database only for the current session.  It acts by adding
	the word to the GoodWord keyword list but doesn't save the
	word to the user's <engspchk.usr> database.  The \es map
	both adds the word to the GoodWord keyword list and adds
	a line to the <engspchk.usr> database for future use.

	The \eS and \eT maps remove words from the user's dictionary;
	the \eS map's action is permanent (actually removes the word
	from the <engspchk.usr> file) whereas the \eT map affects only
	the current session.

	The \ee map ends the engspchk operation by turning syntax off
	and then turning it back on, which should do automatic filetype
	detection, etc.  Engspchk now saves any previous mappings that
	would conflict with engspchk and restores them when engspchk is
	ended.

MAPS FOR ALTERNATIVES WINDOW ONLY			*engspchk-alt*

	<cr> : when on alternatives line, will put word under cursor in
	       misspelled word's stead
	<tab>: like <cr>, but also does a global substitute to change
	       all instances of the misspelled word to the selected
	       alternate.
	q    : will quit the alternate-word window
	:q   : will quit the alternate-word window

	In order to generate alternative spellings engspchk uses agrep.
	Source code for agrep can be found at:

	Windows binaries:
	  http://www.tgries.de/agrep/#DOWNLOAD

	Source:
	  ftp://ftp.cs.arizona.edu/agrep/agrep-2.04.tar.Z
	  http:///www2.cddc.vt.edu/linux/utils/text/agrep-2.04.tar.Z

	To use this feature, assuming one has an agrep executable, put the
	cursor on a misspelled word, then type "\ea".  A list of alternative
	spellings will appear on one line on the bottom of the screen.  Use
	regular vim motions to put the cursor on the word that you want and
	hit the <return> key.  This action should put the new word in the
	stead of the misspelled word.  A ":q" will abort the alternative-word
	spellings window.

	Engspchk will build a list of words from its dictionaries, including
	the user's wordlist.  It will separate them with __END_..._DICTIONARY__
	lines, thus making it simple for folks to remove unwanted portions
	the of the wordlist.

USAGE							*engspchk-usage*

	Press "\ec" or select "Load Engspchk" from the menu (gvim).  This will
	finish loading <engspchk.vim>, load <engspchk.dict>, and optionally
	load <engspchk.wb> (if present) and <engspchk.usr> (if present).
	Spelling errors will then show up in Error highlighting.  Of course
	you'll need to have "syntax on" for this to work (put that statement
	into your <.vimrc> if it isn't already there!).

	If you come across a word that's mistakenly highlighted as a
	spelling error, put the cursor on it and tap "\et" or "\es" while in
	Normal mode.

	The first command will inform Engspchk that the word is spelled
	right, but only for the duration of this particular session.  If you
	want the word to be permanently remembered, use the second command
	"\es" (for engspchk save).

	To go to the next or previous spelling error, use "\en" or "\ep"
	commands respectively.  If upon inspection of a word that's spelled
	incorrectly you're not sure of the correct spelling, you can use the
	alternative spellings feature (see |engspchk-alt|).

	Engspchk does _not_ do a "syntax clear", so that means that you can
	usually just source it in on top of other highlighting.

	Most syntax highlighting files, however, _do_ use "syntax clear" so
	that means that resetting syntax (:set ft=..., changing buffers, etc)
	will clear out engspchk.  One way to avoid this is to use

		:%d
		:0r (filename)

	The user dictionary <engspchk.usr> is generated in the directory
	specified by path specified by the g:cvimsyn variable (or CVIMSYN
	environment variable).  Merely place the cursor on a word that's
	currently not in your dictionary and press "\es".

FILETYPE ENABLED ENGSPCHK
							*engspchk-mail*
	If you want to always use engspchk for spellchecking *.eml
	files as mail:

	a) put into (home)/.vim/filetype.vim:
		au BufNewFile,BufReadPost  *.eml setf mail

	b) put into (home)/.vim/after/syntax/mail.vim:
    	    if (expand("%") != "") && !&diff && (v:progname !~ "vimdiff")
     	     normal \ec
    	    endif

	Similarly one may have engspchk immediately available for other
	filetypes, too.

CHECKING SPELLING IN COMMENTS				*engspchk-comment*

	In order to spell-check comments in various computer languages, the
	language's vim syntax file needs to have its comment syntax group
	contain a cluster.  Engspchk can then add itself to that cluster.
	The vim syntax languages that currently support this include:

	    amiga	c	dcl	latex	tex
	    bash	cpp	fortran	sh	vim
	    bib	csh	ksh

	If there's a language for which you'd like to have comments
	spelling-checked that isn't on the above list, please contact that
	vim syntax file's maintainer and ask for the support mentioned above.


==============================================================================
3. More Languages					*engspchk-language*

CREATING A NEW VERSION OF ENGSPCHK			*engspchk-newversion*

	The <engspchk.vim> file should be renamed to reflect the new language
	being supported: ex. gerspchk.vim  for German.  The prefix (ie. "ger")
	will be used in menus and for the user word database
	(ie., gerspchk.usr).

	Of course, the appropriate dictionary file (ie., gerspchk.dict) must
	also be present in the CVIMSYN subdirectory.

EARLIER LANGUAGE SUPPORT				*engspchk-earlylang*
	There are versions of this script for other languages.  If you come
	up with a version for another language, please let me know where on
	the web it is so that I can help make it known.  The following
	versions were based on earlier editions of <engspchk.vim>:

	 Dutch    : http://vim.sourceforge.net/tips/tip.php?tip_id=161
	 German   : http://jeanluc-picard.de/vim/gerspchk/gerspchk.vim.gz
	 Hungarian: http://vim.sourceforge.net/scripts/script.php?script_id=22
	 Polish   : http://strony.wp.pl/wp/kostoo/polspchk.tar.gz
	 Yiddish  : http://www.cs.uky.edu/~raphael/yiddish/vim.tar.gz


==============================================================================
4. History						*engspchk-history*

	42    : Jan 22, 2004: * acronym support now moved from tex-only
	                        to English.  Non-English languages can
				have this support if the variable
				g:spchk_acronym exists.
	41    : Dec 30, 2003: * DrChip menus now work with console-menus 
	                        (see |console-menus|)
	40    : Nov 24, 2003: * buffers in which engspchk is active are now
	                        made hidden to preserve engspchk highlighting.
			      * Upon \ee (ending engspchk), the previous hidden
				setting is restored
	                      * RareWord, Dialect added to @Spell cluster for
			        incomment=1,2
	39    : Nov 04, 2003: * disabled removal/restoration of \ec menu entry
	                        upon use of \ee
	                      * b:engspchk_loaded now used to prevent
			        double-loading of engspchk and attempts to
				remove engspchk from buffers where it hasn't
				been loaded
	                      * handles multiple windows/buffers
	                      * g:spchknonhl forces spell-checking of
	                        non-highlighted text
	38    : Sep 02, 2003: * @Spell cluster utilized.
	                      * Allow two or more sequential capitalized
	                        letters to be ignored
				(English only, acronym support).
	                      * Yura Kloubakov's inclusion of the user's
	                        mapleader in the DrChip menu and removal
	                        of \ec after use
	                      * Entered dozens of city names into
			        <engspchk.proper>
	35    : Aug 11, 2003: * <engspchk.wb> merged into <engspchk.rare>
	                      * restored dictionaries to 1000 words/line,
	                        as that reduced <engspchk.rare>'s loading
	                        time (from 27 sec to 6 sec on my machine)
	34    : May 06, 2003: * checks for writable user dictionary
	                      * supports dialect and rareword differentiation
	33    : Mar 19, 2003: * saves/restores gdefault (sets to nogd when
                                needed)
	32    : Mar 13, 2003: * consistency in use of <SID> vs s:
	                      * included dialects, thanks to Thakker
	31    : Mar 12, 2003: * works around "#" in isk for SpchkChgWord()
	                      * SpchkEnd was missing s: prefix
	30    : Mar 10, 2003: * restores undolevel if error detected during \ea
	                      * includes SaveMap, \ee, bugfix for Macs with ffs,
	                        <tab> action in alternate-word window,
	                        left/right mouse actions.
	                      * Thanks for ideas, bug reports, etc go to
	                        Bill McCarthy and Peter Karp
	29    : Nov 27, 2002: * checks "syntax_on" variable and will
	                        error-message the user if syntax highlighting
				isn't on
	                      * Keeps and restores original settings that
			        were intended to be local to the alternatives
				window anyway
	28    : Nov 26, 2002: * dropped support for Vim versions 5.x
	27    : Nov 21, 2002: * \eT map to make a word a BadWord
	                      * \eS map to make a word a permanent BadWord
	                      * g:spchkautonext implemented
	26    : Nov 07, 2002: * \en and \ep were skipping over folds.
	                        They now will delve into folds, opening
	                        them only if there's a spelling error within
	                      * Bug-fix: Alternative spellings now works for
	                        two-letter words.
	25    : Oct 03, 2002:   Fixed bad bug (s:incomment code)
	23    : Sep 11, 2002: * BadWord for English now same as non-English
	                      * Improvement made to loading procedure:
	                        one can let g:spchklang="..." then \ec
	                        and get the desired dictionary loaded.
	22    : Sep 10, 2002: * non-English languages' BadWord needed to be
	                        extended to more characters than \a
	21    : Aug 28, 2002: * removed spurious syn-case-ignore/match pair
	20    : Aug 21, 2002: * removed a superfluous <unique>
	                      * fixed \ea bug (invoking twice caused problem)
	19    : Aug 16, 2002: * agrep-initialization bug fix
	18    : Aug 05, 2002: * g:spchkpunc added (tnx to Steve Hall)
	17    : Aug 02, 2002: * more documentation, small fix to menus for
	                        non-English language support.
	16    : Aug 02, 2002: * For vim6.0 or later, uses filereadable() to
	                        check if <engspck.vim> is readable (and
				issues an error message if so)
	15    : May 28, 2002: * Included has("menu") with menu tests
	                      * <engspchk.dict> broken out to a separate file
	                      * most norm changed to norm!
	                      * Mats Bentsen : agrep's path now enclosed
			        in ".."s. Helps with Windows' directory names
	                        with embedded spaces
	                      * Renamed : usr_engspchk.vim    -> engspchk.usr
	                      * Renamed : wb1913_engspchk.vim -> engspchk.wb
	v2.13 : Feb 27 2002 : * One line alternates window now disappears after
	                        selection
	v2.12 : Feb 26 2002 : * Building the one-word dictionary for \ea will
	                        now include user dictionary words.  The
				building process has been speeded up by
				temporarily turning syntax highlighting
	                        off and undo levels to -1.  Loading the
				Webster's 1913 dictionary words has been
				commented out because the words therein
				are, in my humble opinion, typically arcane
	                        and hence clutter up the alternatives window.
	v2.11 : Feb 25 2002 : * included note that 6.0 alphas may not work right
	                        (ie. 6.0z doesn't have <silent>) and engspchk
	                        has no way to test for them.
	v2.10 : Feb 20 2002 : * Included allowing g:cvimsyn to supercede
	                        $CVIMSYN
	                      * Engspchk now made into a quick-loading plugin
	                      * Alternatives supports first-letter case
				retention
	v2.07 : Jul 17 2001 : * fix to missing CVIMSYN environment variable
                                message
	v2.06 : Jul 16 2001 : * contains note about TK's "create" script
	v2.04 : Mar 19 2001 : * \%# is back with 6.0y
	v2.03 : Feb 26 2001 : * included automatic language detection/loading
	v2.02 : Feb 13 2001 : * commented out \%#-using rule until CT gets it
	                        working!
	                      * Fixed some contractions whose root word got
			        into the main dictionary
	                      * Fixed "extend", a new Vim syntax-related keyword
	v2.01 : Feb  9 2001 : * includes <bib.vim> spell-checking
	v2.00 : Feb  5 2001 : * For 6.0v or later: words will no longer flash
	                        in Error as they're being typed.
				Thank you Chase Tingley for \%# !
	v1.28 : Jan 29 2001 : * shortened SpchkNxt and SpchkPrv
	                        (thanks, Benji Fisher!)
	v1.27 : Jan 29 2001 : * includes using agrep and \ea for alternative
	                        spelling
	v1.26 : Jan 25 2001 : * removed a number of two-letter abbreviations
	                        and "ain" from the dictionary (more leftovers
				from ispell)
	v1.25 : Jan 22 2001 : * included 12000 more words from various online
	                        dictionaries
	                      * I've also culled out a few misspellings that
				crept in from the original ispell dictionary
				that was used.
	v1.24 : Nov  1 2000 : * included optional <engspchk2.vim> sourcing
	v1.22 : Oct  3 2000 : * added "transparent" keyword to all GoodWords
	v1.20 : Sep 18 2000 : * engspchk now saves using vim functions, avoiding
	                        any external program entanglements for
				versions 5.2 or later
	v1.19 : Apr  7 2000 : * more contractions and words: couldnt've, etc.
	v1.18 : Mar 28 2000 : * included words from spelling bee and other
	                        dictionaries
	                      * included "didn't" contraction, removed
			        "didn didnt"
	v1.17 : Aug 12 1999 : * the epoch


==============================================================================
vim:tw=78:ts=8:ft=help
